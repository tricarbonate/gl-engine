!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
MESH	Mesh.h	2;"	d
Mesh	Mesh.cpp	/^Mesh::Mesh():$/;"	f	class:Mesh
Mesh	Mesh.h	/^class Mesh{$/;"	c
SHADER_PROGRAM	ShaderProgram.h	6;"	d
ShaderProgram	ShaderProgram.cpp	/^ShaderProgram::ShaderProgram(){} \/\/ default constructor, should not be used$/;"	f	class:ShaderProgram
ShaderProgram	ShaderProgram.cpp	/^ShaderProgram::ShaderProgram(std::map<const char*, GLenum> locations):$/;"	f	class:ShaderProgram
ShaderProgram	ShaderProgram.h	/^class ShaderProgram{$/;"	c
Uniform	ShaderProgram.h	/^struct Uniform{$/;"	s
WINDOW_HEIGHT	main.cpp	/^const unsigned int WINDOW_HEIGHT = 600;$/;"	v
WINDOW_WIDTH	main.cpp	/^const unsigned int WINDOW_WIDTH = 900;$/;"	v
addFile	ShaderProgram.cpp	/^void ShaderProgram::addFile(const char* fileLocation, GLenum shaderType){$/;"	f	class:ShaderProgram
addShader	ShaderProgram.cpp	/^void ShaderProgram::addShader(GLuint programID, const char* shaderCode, GLenum shaderType){$/;"	f	class:ShaderProgram
addUniform	ShaderProgram.cpp	/^void ShaderProgram::addUniform(const char* uniformName){$/;"	f	class:ShaderProgram
compileProgram	ShaderProgram.cpp	/^void ShaderProgram::compileProgram(){$/;"	f	class:ShaderProgram
createMesh	Mesh.cpp	/^void Mesh::createMesh(GLfloat *vertices, GLuint *indices, uint nV, uint nI){$/;"	f	class:Mesh
failed	utils.hpp	/^int failed(std::string message){$/;"	f
id	ShaderProgram.h	/^  GLuint id;$/;"	m	struct:Uniform
indexCount_	Mesh.h	/^    uint indexCount_;$/;"	m	class:Mesh
indices	commonValues.hpp	/^static unsigned int indices[] = {$/;"	v
indicesVbo_	Mesh.h	/^    GLuint vao_, indicesVbo_, verticesVbo_;$/;"	m	class:Mesh
locs_	ShaderProgram.h	/^    std::map<const char*, GLenum> locs_;$/;"	m	class:ShaderProgram
main	main.cpp	/^int main(){$/;"	f
model	main.cpp	/^glm::mat4 model, view, projection, mvp;$/;"	v
mvp	main.cpp	/^glm::mat4 model, view, projection, mvp;$/;"	v
name	ShaderProgram.h	/^  const char* name;$/;"	m	struct:Uniform
projection	main.cpp	/^glm::mat4 model, view, projection, mvp;$/;"	v
readFile	ShaderProgram.cpp	/^std::string ShaderProgram::readFile(const char* fileLocation){$/;"	f	class:ShaderProgram
renderMesh	Mesh.cpp	/^void Mesh::renderMesh(){$/;"	f	class:Mesh
setUniform	ShaderProgram.h	/^inline void ShaderProgram::setUniform(const char* uniformName, T value){$/;"	f	class:ShaderProgram
setUniform_part	ShaderProgram.h	/^inline void ShaderProgram::setUniform_part<float>(GLuint id, float value){$/;"	f	class:ShaderProgram
setUniform_part	ShaderProgram.h	/^inline void ShaderProgram::setUniform_part<glm::mat4>(GLuint id, glm::mat4 value){$/;"	f	class:ShaderProgram
shaderID_	ShaderProgram.h	/^    GLuint shaderID_;$/;"	m	class:ShaderProgram
shaderProgram	main.cpp	/^ShaderProgram shaderProgram;$/;"	v
uint	Mesh.h	/^typedef unsigned int uint;$/;"	t
uniforms_	ShaderProgram.h	/^    std::vector<Uniform> uniforms_;$/;"	m	class:ShaderProgram
useProgram	ShaderProgram.cpp	/^void ShaderProgram::useProgram(){$/;"	f	class:ShaderProgram
vao_	Mesh.h	/^    GLuint vao_, indicesVbo_, verticesVbo_;$/;"	m	class:Mesh
vertices	commonValues.hpp	/^static GLfloat vertices[] = {$/;"	v
verticesVbo_	Mesh.h	/^    GLuint vao_, indicesVbo_, verticesVbo_;$/;"	m	class:Mesh
view	main.cpp	/^glm::mat4 model, view, projection, mvp;$/;"	v
~Mesh	Mesh.cpp	/^Mesh::~Mesh(){}$/;"	f	class:Mesh
~ShaderProgram	ShaderProgram.cpp	/^ShaderProgram::~ShaderProgram(){}$/;"	f	class:ShaderProgram
